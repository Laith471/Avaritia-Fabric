plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {

	mavenCentral()
	maven {
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		name = "ModMaven"
		url = "https://modmaven.dev"
	}

	maven {
		name = "ModMenu"
		url = "https://maven.terraformersmc.com/releases/"
	}

	maven {
		name = "Star"
		url = "https://maven.wispforest.io"
	}

	maven {
		name = "Hephaestus"
		url = "https://mvn.devos.one/releases/"
	}


	maven {
		name = "Hephaestus"
		url = "https://mvn.devos.one/snapshots/"
	}

	maven {
		url = 'https://maven.ladysnake.org/releases'
	}

	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}

	maven {
		url = "https://maven.shedaniel.me/"
	}

	maven {
		url = 'https://jitpack.io'
	}

	maven {
		url = "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}

	maven {
		url "https://maven.pkg.github.com/moremcmeta/*/"
		credentials {
			username System.getenv("MOREMCMETA_MAVEN_USER") ?: project.moremcmetaMavenUser
			password System.getenv("MOREMCMETA_MAVEN_PASS") ?: project.moremcmetaMavenPass
		}
	}

	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroup 'org.ladysnake'
			includeGroupByRegex 'dev.onyxstudios.*'
		}
	}
}

loom {
    runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=avaritia"
 
			runDir "build/datagen"
		}
	}
}

// Add the generated resources to the main source set
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
dependencies {

	//Minecraft
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	//Yarn mappings
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	//Fabric Loader
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//MoreMCMeta
	modImplementation "io.github.moremcmeta:moremcmeta-fabric:${project.moremcmeta_version}"

	//Porting Lib required by Hephaestus
	modCompileOnly "io.github.fabricators_of_create.Porting-Lib:Porting-Lib:${project.porting_lib_version}+${project.minecraft_base_version}-entity-refactor"

	//Hephaestus(Tinker Construct port)
	modCompileOnly "slimeknights.tconstruct:Hephaestus:${project.minecraft_version}-${project.hephaestus_version}"

	//REI
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rei_version}"
	modImplementation "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

	//Cloth Config
	modImplementation ("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	//PAL
	include(modImplementation "io.github.ladysnake:PlayerAbilityLib:${project.pal_version}")

	//Renderer
	include(modImplementation("com.github.0x3C50:Renderer:master-SNAPSHOT"))

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}